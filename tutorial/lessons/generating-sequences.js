import TextEdit from "../components/text-edit.js";

const factorial = R.pipe(R.times(R.add(1)), R.reduce(R.multiply, 1));

export default {
	id: "generating-sequences",
	name: "Generating Sequences",
	operations: <React.Fragment><a href="#generate">(^) generate</a></React.Fragment>,
	description: <div>
		<p>The <a href="#generate">(^) generate</a> operation takes a unary operation (<b>u</b>) to the left, and positive integer (<b>n</b>) to the right.</p>
		<p>It produces an array of length <b>n</b>, with each element generated by applying its zero-based index to <b>u</b>.</p>
		<div className="code-block">;^4=(0 1 2 3)</div>
	</div>,
	exercise: {
		question: <div>
			<div>The recursive implementation of <a href="#recursion">factorial</a> was given previously.</div>
			<p>Sometimes, sequences can be used to avoid problems commonly associated with recursion, including inefficiency and greater space requirements.</p>
			<p>Define <b>factGenNN</b> to calculate the factorial such that:</p>
		</div>,
		getJs: ({def}) => `const solution = /*ts ${def} */;`,
		getHtml: details => <div className="single-line name-expression">
			<div className="name">factGenNN</div>
			<TextEdit {...{...details, multiline: true, solution: `+1^.*$`}}/>
		</div>,
		getTestValues: () => [Math.floor(Math.random() * 8) + 3],
		hint1: "Use operators: + * . $ ^",
		hint2: "Generate positive integers up to the value and times-reduce",
		tests: [
			{description: testValue => <span><b>factGenNN</b>{`${testValue} equals ${factorial(testValue)}`}</span>, condition: ({solution, testValue}) => factorial(testValue) === solution(testValue)},
			{description: () => <span><b>factGenNN</b> generates a sequence</span>, condition: ({es6}) => es6.includes("ts.hat")},
			{description: () => <span><b>factGenNN</b> does <b>not</b> call itself</span>, condition: ({def}) => !def.includes("factGenNN")},
		],
	},
	epilogue: () => <p>You may notice this implementation shown at the top of this page!</p>,
};